services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: pokedex-redis
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - pokedex-network

  # NestJS Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pokedex-app
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'node', '-e', "require('http').get('http://localhost:3000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      start_period: 40s
      retries: 3
    networks:
      - pokedex-network

networks:
  pokedex-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
